commit 8b4a5816bd557e4644eba4b13a5c574a2143ac5e
Author: Dan Halbert <halbert@adafruit.com>
Date:   Wed Jul 27 22:51:14 2022 -0400

    don't specify -sdk in Makefile.m1 for mpy-cross

 mpy-cross/Makefile.m1 | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit b6901078506de8cd468a9d8d3fe1623d3fe8b05d
Author: Scott Shawcroft <scott@adafruit.com>
Date:   Thu Jun 2 12:33:51 2022 -0700

    Fix mpy-cross again

 mpy-cross/mpy-cross.mk | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 0d257fc4f875d2e44e01abf7703ee124b4af8e66
Author: Scott Shawcroft <scott@adafruit.com>
Date:   Thu Jun 2 12:30:19 2022 -0700

    Fix mpy-cross and unix builds

 mpy-cross/mpy-cross.mk | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 3cc46c74b95d6fdef0d31b37d08b18ad072c63ef
Author: Scott Shawcroft <scott@adafruit.com>
Date:   Fri May 27 15:39:55 2022 -0700

    Fix compiles

 mpy-cross/mpy-cross.mk | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit b5ab73b111ab790c7c7382317a881c0c9cbb1bd7
Author: Jeff Epler <jepler@gmail.com>
Date:   Sat Apr 9 09:55:10 2022 -0500

    whole conditional block no longer needed

 mpy-cross/mpy-cross.mk | 5 -----
 1 file changed, 5 deletions(-)

commit d3a989f27479bf148eae17221254c0557d090fb6
Author: Limor "Ladyada" Fried <limor@ladyada.net>
Date:   Fri Apr 8 16:55:49 2022 -0400

    not sure why this changed...but it changed in mingw64?

 mpy-cross/mpy-cross.mk | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 01cabb0324186808c14ec1b02fb8a3be28837160
Merge: ddfcfca65 da4b38e75
Author: Jeff Epler <jepler@gmail.com>
Date:   Tue Feb 15 12:36:26 2022 -0600

    Merge tag 'v1.18'
    
    Boosted performance, board.json metadata, more mimxrt, rp2, samd features
    
    This release of MicroPython sees a boost to the overall performance of the
    VM and runtime.  This is achieved by the addition of an optional cache to
    speed up general hash table lookups, as well as a fast path in the VM for
    the LOAD_ATTR opcode on instance types.  The new configuration options are
    MICROPY_OPT_MAP_LOOKUP_CACHE and MICROPY_OPT_LOAD_ATTR_FAST_PATH.  As part
    of this improvement the MICROPY_OPT_CACHE_MAP_LOOKUP_IN_BYTECODE option has
    been removed, which provided a similar map caching mechanism but with the
    cache stored in the bytecode, which made it not useful on bare metal ports.
    The new mechanism is measured to be at least as good as the old one,
    applies to more map lookups, has a constant RAM overhead, and applies to
    native code as well as bytecode.
    
    These performance options are enabled on the esp32, mimxrt, rp2, stm32 and
    unix ports.  For esp32 and mimxrt some code is also moved to RAM to further
    boost performance.  On stm32, performance increases by about 20% for
    benchmarks that are heavy on name lookups, like misc_pystone.py and
    misc_raytrace.py.  On esp32 performance can increase by 2-3x, and on mimxrt
    it is up to 6x.
    
    All boards in all ports now have a board.json metadata file, which is used
    to automatically build firmware and generate a webpage for that board
    (among other possibilities).  Auto-build scripts have been added for this
    purpose and they build all esp32, mimxrt, rp2, samd and stm32 boards.  The
    generated output is available at https://micropython.org/download.
    
    Support for FROZEN_DIR and FROZEN_MPY_DIR has been deprecated for some time
    and was finally removed in this release.  Instead of these, FROZEN_MANIFEST
    can be used.  The io.resource_stream() function is also removed, replaced
    by the pure Python version in micropython-lib.
    
    The search order for importing frozen Python modules is now controlled by
    the ".frozen" entry in sys.path.  This string is added by default in the
    second position in sys.path.  User code should adjust sys.path depending on
    the desired behaviour.  Putting ".frozen" first in sys.path will speed up
    importing frozen modules.
    
    A bug in multiple precision integers with bitwise of -0 was fixed in commit
    2c139bbf4e5724ab253b5b034ce925e04267a9c4.
    
    The platform module has been added to allow querying the compiler and
    underlying SDK/HAL/libc version.  This is enabled on esp32, mimxrt and
    stm32 ports.
    
    The mpremote tool now supports seek, flush, mkdir and rmdir on PC-mounted
    filesystems.  And a help command has been added.
    
    The documentation has seen many additions and improvements thanks (for a
    second time) to the Google Season of Docs project.  The rp2 documentation
    now includes a reference for PIO assembly instructions, a PIO quick
    reference and a PIO tutorial.  The random and stm modules have been
    documented, along with sys.settrace, manifest.py files and mpremote.  There
    is also now more detail about the differences between MicroPython and
    standard Python 3.5 and above.
    
    The esp32 port sees support for ESP32-S3 SoCs, and new boards GENERIC_S3,
    ESP32_S2_WROVER, LOLIN_S2_MINI, LOLIN_S2_PICO and UM_FEATHERS2NEO.  The PWM
    driver has been improved and now supports all PWM timers and channels, and
    the duty_u16() and duty_ns() methods, and it keeps the duty constant when
    changing frequency.  The machine.bitstream() function has been improved to
    use RMT, with an option to select the original bit-banging implementation.
    
    The mimxrt port gained new hardware features: SDRAM and SD card support, as
    well as network integration with a LAN driver.  The machine.WDT class was
    added along with the machine.reset_cause(), machine.soft_reset(),
    machine.unique_id() add machine.bitstream() functions.  DHT sensor support
    was added, and f-strings were enabled.
    
    The rp2 port now has support for networking, and bluetooth using NimBLE.
    The Nina-W10 WiFi/BT driver is fully integrated and supported by the new
    Arduino Nano RP2040 connect board.  I2S protocol support is added along
    with a machine.bitstream() driver and DHT sensor support.  The PWM driver
    had a bug fix with the accuracy of setting/getting the frequency, and the
    duty value is now retained when changing the frequency.
    
    On the samd port there is now support for the internal flash being a block
    device, and for filesystems and the os module.  Pin and LED classes have
    been implemented.  There are more time functions, more Python features
    enabled, and the help() function is added.  SEEED_WIO_TERMINAL and
    SEEED_XIAO board definitions are now available.
    
    The stm32 port now has support for F427, F479 and H7A3(Q)/H7B3(Q) MCUs, and
    new board definitions for VCC_GND_H743VI, OLIMEX_H407, MIKROE_QUAIL,
    GARATRONIC_PYBSTICK26_F411, STM32H73B3I_DK.  A bug was fixed in the SPI
    driver where a SPI transfer could fail if the CYW43 WiFi driver was also
    active at the same time.
    
    On the windows port the help() function has been enabled, and support for
    build variants added, to match the unix port.
    
    The zephyr port upgraded Zephyr to v2.7.0.
    
    The change in code size since the previous release for various ports is
    (absolute and percentage change in the text section):
    
           bare-arm:  -1520  -2.605%
        minimal x86:  -2256  -1.531%
           unix x64:   -457  -0.089%
        unix nanbox:   -925  -0.204%
              stm32:   +312  +0.079% PYBV10
             cc3200:   -176  -0.096%
            esp8266:   +532  +0.076% GENERIC
              esp32: +27096  +1.820% GENERIC
                nrf:   -212  -0.121% pca10040
                rp2:  +9904  +2.051% PICO
               samd: +35332 +33.969% ADAFRUIT_ITSYBITSY_M4_EXPRESS
    
    The changes that dominate these numbers are:
    - bare-arm, minimal: use of new MICROPY_CONFIG_ROM_LEVEL_MINIMUM option and
      subsequent disabling of remaining optional features
    - unix, cc3200, nrf: general code size reductions of the core
    - stm32: performance improvements, addition of platform module
    - esp8266: enabling f-strings
    - esp32: use of -O2 instead of -Os
    - rp2: machine.I2S and other new hardware features
    - samd: filesystem support and other new hardware features
    
    Thanks to everyone who contributed to this release: Alan Dragomirecký,
    Alexey Shvetsov, Andrew Leech, Andrew Scheller, Antoine Aubert, Boris
    Vinogradov, Chris Boudacoff, Chris Fiege, Christian Decker, Damien George,
    Daniel Gorny, Dave Hylands, David Michieli, Emilie Feral, Frédéric Pierson,
    gibbonsc, Henk Vergonet, iabdalkader, Ihor Nehrutsa, Jan Hrudka, Jan Staal,
    jc_.kim, Jim Mussared, Jonathan Hogg, Laurens Valk, leo chung, Lorenzo
    Cappelletti, Magnus von Wachenfeldt, Matt Trentini, Matt van de Werken,
    Maureen Helm, Michael Bentley, Michael Buesch, Mike Causer, Mike Teachman,
    Mike Wadsten, Ned Konz, NitiKaur, oli, patrick, Patrick Van Oosterwijck,
    Peter Boin, Peter Hinch, Peter van der Burg, Philipp Ebensberger, Pooya
    Moradi, retsyo, robert-hh, roland van straten, Scott Armitage, Sebastian
    Wicki, Seon Rozenblum, Sergei Silnov, Simon Baatz, Stewart Bonnick, stijn,
    Tobias Thyrrestrup, Tomas Vanek, YoungJoon Chun.
    
    What follows is a detailed list of changes, generated from the git commit
    history, and organised into sections.
    
    Main components
    ===============
    
    all:
    - remove MICROPY_OPT_CACHE_MAP_LOOKUP_IN_BYTECODE
    - update Python formatting to latest Black version 21.12b0
    - remove support for FROZEN_DIR and FROZEN_MPY_DIR
    
    py core:
    - parse: simplify parse nodes representing a list
    - emitnative: ensure load_subscr does not clobber existing REG_RET
    - mpconfig.h: define initial templates for "feature levels"
    - vm: add a fast path for LOAD_ATTR on instance types
    - map: add an optional cache of (map+index) to speed up map lookups
    - builtinimport: forward all debug printing to MICROPY_DEBUG_PRINTER
    - add wrapper macros so hot VM functions can go in fast code location
    - runtime: fix crash when exc __new__ doesn't return an exc instance
    - mpconfig.h: define the "extra" feature level
    - mpconfig.h: revert MICROPY_REPL_INFO to disabled at all levels
    - gc: add hook to run code during time consuming GC operations
    - showbc: print unary-op string when dumping bytecode
    - modsys: replace non-ASCII quote char with ASCII char
    - runtime: allow types to use both .attr and .locals_dict
    - lexer: support nested [] and {} characters within f-string params
    - objfun.h: remove obsolete comments about entries in extra_args
    - builtinimport: refactor module importing
    - showbc: fix printing of raw bytecode header on nanbox builds
    - modio: remove io.resource_stream function
    - only search frozen modules when '.frozen' is found in sys.path
    - mkrules.cmake: set frozen preprocessor defs early
    - runtime: allow initialising sys.path/argv with defaults
    - mpstate.h: only include sys.path/argv objects in state when enabled
    - mpz: fix bugs with bitwise of -0 by ensuring all 0's are positive
    - qstr: reset mpstate.qstr_last_chunk before raising an error
    - modbuiltins: add additional macro for extending builtins
    - mpconfig.h: define MICROPY_PY_USSL_FINALISER only if not defined
    
    extmod:
    - machine_i2c: make SoftI2C configurable via macro option
    - machine_spi: make SoftSPI configurable via macro option
    - modonewire: make _onewire module configurable via macro option
    - machine_pwm: factor out machine.PWM bindings to common code
    - move modnetwork and modusocket from stm32 to extmod
    - modnetwork: add STA_IF and AP_IF constants
    - modnetwork: add extended socket state
    - modusocket: add read/write stream methods to socket object
    - modnetwork: define network interfaces in port config files
    - network_cyw43: make consistent use of STA and AP constants
    - modnetwork: remove STM32 references
    - modnetwork: remove modnetwork socket u_state member
    - mpbthci.h: add mp_bluetooth_hci_uart_any prototype
    - nimble: add nimble CMake fragment file
    - add platform module
    - moduplatform: improve implementation for PC ports
    - vfs_posix_file: support MP_STREAM_POLL in vfs_posix_file_ioctl
    - modbluetooth: add connection interval to gap_connect
    - nimble: update to NimBLE v1.4
    - nimble: remove workaround for OS_ENOMEM
    - uasyncio: fix gather returning exceptions from a cancelled task
    - uplatform: remove unused definitions
    - uplatform: use generic custom platform string
    - network_ninaw10: fix scan list order to match other NICs
    - modbluetooth: support gap_connect(None) to cancel a connection
    - modure: redirect regex debug printing to mp_printf
    - network_ninaw10: fix config of AP mode
    - network_ninaw10: disable active connections before connecting
    - network_ninaw10: make NIC state persistent
    - network_ninaw10: return -1 on timeout from recv/send
    - network_ninaw10: make recv/recvfrom interchangeable
    - moduplatform: detect xtensa arch
    - modusocket: allow setting timeout on unbound sockets
    - modusocket: initialise accepted socket state
    - network_ninaw10: use socket timeout preset in modusocket
    - modbluetooth: fix conditional compilation of ringbuf_put_uuid
    - modbluetooth: put declaration of connect_cancel in correct place
    
    shared:
    - libc/string0: don't include string.h, and provide __memcpy_chk
    - runtime/pyexec: cleanup EXEC_FLAG flag constants
    
    drivers:
    - ninaw10: add ublox Nina-W10 WiFi/BT module driver
    - lsm6dsox: add LSM6DSOX driver and examples
    - neopixel: avoid heap alloc in fill()
    - ninaw10: fix BSSID byte order, and add null byte to ESSID
    - ninaw10/nina_wifi_drv: fix DNS resolution
    
    mpy-cross: no changes specific to this component/port
    
    lib:
    - mynewt-nimble: switch to the MicroPython fork of NimBLE
    - asf4: point submodule to latest commit on circuitpython branch
    - update pico-sdk to 1.3.0 and tinyusb to 0.12.0
    - stm32lib: update library for L4 v1.17.0, new G4, WL, and MMC fixes
    - stm32lib: update library for fix to F7 USB HS
    
    Support components
    ==================
    
    docs:
    - library/os.rst: clarify littlefs requirements for block erase
    - library/bluetooth.rst: update incorrect link to gatts_write
    - make.bat: change Windows output dir from '_build' to 'build'
    - library/machine.I2S.rst: specify that I2S.shift args are kw-only
    - esp32: explain ESP32 PWM modes, timers, and channels
    - rp2: add reference for PIO assembly instructions, and PIO tutorial
    - library/random.rst: document the random module
    - reference/mpremote.rst: add docs for mpremote
    - reference/manifest.rst: add docs for manifest.py files
    - library/stm.rst: document the stm module
    - esp32/tutorial: add an example of peripheral control via regs
    - rp2/general.rst: fix typo with missing spaces
    - library/framebuf.rst: adjust dimensions in example
    - library/rp2.rst: update function asm_pio_encode to add sideset_opt
    - reference/filesystem.rst: add detail on how to use littlefs fuse
    - rp2/quickref.rst: add section on PIO
    - library/sys.rst: add docs for sys.settrace
    - esp8266/tutorial: fix comments of FrameBuffer examples
    - library/uasyncio.rst: detail exception behaviour in cancel/timeout
    - library/machine.Timer.rst: document 'id' as positional-only arg
    - library/machine.SPI.rst: add example SPI usage
    - library/machine.Timer.rst: document `period` and `callback` args
    - library/machine.Pin.rst: add Pin.ANALOG mode constant
    - remove trailing spaces and convert tabs to spaces
    - library/sys.rst: add note about '.frozen' as an entry in sys.path
    - differences: document details of new PEPs/features in Python 3.5+
    - update copyright year range to include 2022
    - esp32: update RMT quickref example to match latest code
    
    examples: no changes specific to this component/port
    
    tests:
    - perf_bench: use math.log instead of math.log2
    - basics: add tests for type-checking subclassed exc instances
    - micropython/const.py: add comment about required config for test
    - cpydiff: clarify f-string diffs regarding concatenation
    - basics/int_big_cmp.py: add more tests for big-int comparison
    - extmod: skip uselect_poll_udp when poll() is not available
    
    tools:
    - autobuild: add auto build for GENERIC_C3_USB
    - ci.sh: use IDF v4.4 as part of esp32 CI and build GENERIC_S3
    - autobuild: add the MIMXRT1010_EVK board to autobuild
    - ci.sh: use a specific ESP IDF v4.4 commit
    - autobuild: add script to generate website board metadata
    - dfu.py: make tool work with python3 when parsing DFU files
    - autobuild: automatically build all mimxrt, rp2 and samd boards
    - autobuild: automatically build all stm32 boards
    - mpremote: implement seek and flush in ioctl method
    - autobuild: automatically build all esp32 boards
    - upip.py: support == to specify exact package version
    - makemanifest.py: make str conversion compatible with Python 2
    - makemanifest.py: merge make-frozen.py
    - mpremote: add mkdir and rmdir to RemoteFS
    - mpremote: add help command
    - mpremote: add link to mpremote docs URL in help message
    - upip.py: skip '.frozen' entry in sys.path for install path
    - autobuild: build esp8266 OTA image with GENERIC_1M board
    - ci.sh: upgrade Zephyr docker image to v0.21.0
    - ci.sh: build zephyr nucleo_wb55rg to test zephyr bluetooth build
    
    CI:
    - workflows: use Python 3.8 for macos workflow
    - workflows: add new workflow to build ports download metadata
    
    The ports
    =========
    
    all ports:
    - add board.json for all boards
    - add images, features and urls to board.json
    - add '.frozen' as the first entry in sys.path
    - move '.frozen' to second entry in sys.path
    
    bare-arm port:
    - mpconfigport.h: use MICROPY_CONFIG_ROM_LEVEL_MINIMUM
    - mpconfigport.h: disable remaining optional features
    
    cc3200 port: no changes specific to this component/port
    
    esp8266 port:
    - boards/GENERIC: enable f-strings
    - extract qstr from object when comparing keys in config()
    - etshal.h: remove unneeded function declarations
    - allow building a board to any dest directory
    
    esp32 port:
    - boards: add new FeatherS2-Neo board definition
    - machine_timer: use tx_update member for IDF 4.4 and above
    - add support for ESP32-S3 SoCs
    - boards: add new GENERIC_S3 board definition
    - machine_hw_spi: fix hardware SPI DMA channels for S2/S3
    - boards: add board definition for ESP32-S2-WROVER module
    - boards: add LOLIN_S2_MINI ESP32-S2 board
    - machine_pwm: add support for all PWM timers and channels
    - README: updated readme with req IDF vers for ESP32-S2, C3 and S3
    - usb: add USB host connection detection for CDC serial output
    - machine_pin: block out IO16 and IO17 when using SPIRAM on ESP32
    - mpthreadport: fix TCB cleanup function so thread_mutex is ready
    - main: add option for a board to hook code into startup sequence
    - split out WLAN code from modnetwork.c to network_wlan.c
    - enable optimisations and move code to iRAM to boost performance
    - usb: improve speed of USB CDC output
    - add specific deploy_s2.md instructions for esp32-s2
    - boards/LOLIN_S2_MINI: add image to board.json
    - boards: update board and deploy metadata for UM_xxx boards
    - usb: further improve speed of USB CDC output
    - boards/LOLIN_S2_PICO: add LOLIN_S2_PICO board definition files
    - boards/ESP32_S2_WROVER: link to specific deploy_s2 instructions
    - support building with latest IDF v5
    - in machine_i2s, send null samples in underflow situations
    - in machine_i2s, make object reference arrays root pointers
    - add SDCard support for S3, and a GENERIC_S3_SPIRAM board
    - boards/GENERIC_S3: enable BLE on ESP32 S3
    - machine_pwm: implement duty_u16() and duty_ns() PWM methods
    - extract qstr from object when comparing keys in config()
    - machine_pin: make GPIO 26 usable for S2,S3 if SPIRAM not config'd
    - machine_hw_spi: fix SPI default pins reordering on ESP32-S2/S3
    - machine_hw_spi: set proper default SPI(id=1) pins on S2,S3 and C3
    - machine_hw_spi: set proper default SPI(id=2) pins on S2 and S3
    - boards: remove SPI pin defaults from GENERIC S2/S3 boards
    - modnetwork: synchronize WiFi AUTH_xxx constants with IDF values
    - machine_pwm: keep duty constant when changing frequency
    - machine_bitstream: replace bit-bang code with RMT-based driver
    - machine_i2s: add support for ESP-IDF 4.4
    - machine_bitstream: fix signal duplication on output pins
    - esp32: enable platform module with IDF version
    - boards/GENERIC_D2WD: build with -Os optimisation
    - esp32_rmt: install RMT driver on core 1
    - machine_bitstream: reinstate bitstream bit-bang implementation
    
    javascript port: no changes specific to this component/port
    
    mimxrt port:
    - sdcard: implement SDCard driver
    - machine_bitstream: add bitstream function to machine module
    - rework flash configuration
    - sdram: add SDRAM support
    - eth: add LAN support and integrate the network module
    - modmachine: implement machine.WDT() and machine.reset_cause()
    - boards: fix the D14/D15 pin assignment of MIMXRT1050/60/64_EVK
    - hal: remove duplicate definitions from flexspi_hyper_flash.h
    - dma_channel: fix the DMA channel management
    - fix cycle counter for time.ticks_cpu() and machine.bitstream()
    - add dht_readinto() to the mimxrt module, and freeze dht.py
    - extend the help() message and README.md
    - mpconfigport.h: enable f-strings
    - modmachine: implement soft_reset() and unique_id() functions
    - boards/make-pins.py: allow empty lines and comments in pins.csv
    - optimize the runtime speed
    - enable the platform module
    - boards: add the Seeed ARCH MIX board
    - boards: update the board.json files and add deploy_xx.md files
    - fix mp_hal_quiet_timing_enter()/exit() so timer still runs
    - support PWM using the FLEXPWM and QTMR modules
    - define UART 0 on MIMXRT boards
    - support selection of PHY type and address
    - re-enable eth checksum creation by HW
    - fix a tiny unnoticed bug in sdcard.c
    - add a driver for the DP83848 PHY device
    - refactor the reading of the machine id
    - enable ticks_cpu at boot time for NDEBUG builds only
    - use -Og instead of -O0 for DEBUG builds
    - tidy up the board flash related files
    - hal: allow readSampleClkSrc to be configured by a board
    - enable MICROPY_PY_USSL_FINALISER
    
    minimal port:
    - mpconfigport.h: use MICROPY_CONFIG_ROM_LEVEL_MINIMUM
    - Makefile: don't force a 32-bit build
    - mpconfigport.h: disable features that are not needed
    
    nrf port:
    - Makefile: improve Black Magic Probe commands
    - main: use VFS helper function to mount fs and chdir
    
    pic16bit port: no changes specific to this component/port
    
    powerpc port: no changes specific to this component/port
    
    qemu-arm port: no changes specific to this component/port
    
    rp2 port:
    - mpconfigport.h: enable heapq module
    - add support for bluetooth module using NimBLE
    - add framework for networking
    - mpconfigport.h: use the "extra" feature level
    - enable optimisations (comp goto, map cache, fast attr)
    - machine_i2s: add I2S protocol support
    - add support for Nina-W10 WiFi/BT module
    - boards: add support for Arduino Nano RP2040
    - machine_bitstream: implement the machine.bitstream driver
    - boards: add neopixel.py to manifest.py
    - rp2_pio: support exec with sideset
    - boards/PIMORONI_PICOLIPO_16MB: fix 16MB flash size
    - boards: add PYBSTICK26 RP2040 board definition
    - machine_uart: handle and clear UART RX timeout IRQ
    - boards/ARDUINO_NANO_RP2040_CONNECT: set default I2C pins
    - machine_pwm: fix PWM frequency setting
    - machine_pwm: keep duty value when changing the frequency
    - add support for DHT11 and DHT22 sensors
    - CMakeLists.txt: allow a board to override PICO_BOARD
    - boards/GARATRONIC_PYBSTICK26_RP2040: use correct pico-sdk board cfg
    
    samd port:
    - integrate latest asf4, add help, more time funcs and uPy features
    - samd_soc: allow a board to configure the low-level MCU config
    - add internal flash block device, filesystem and uos support
    - add Pin and LED classes, and machine.unique_id
    - boards/ADAFRUIT_FEATHER_M0_EXPRESS: update for flash and pins
    - boards/ADAFRUIT_ITSYBITSY_M4_EXPRESS: update for flash and pins
    - boards/MINISAM_M4: update for flash and pins
    - boards/ADAFRUIT_TRINKET_M0: update for flash and pins
    - boards/SAMD21_XPLAINED_PRO: update for flash and pins
    - boards/SEEED_WIO_TERMINAL: add new board definition
    - boards/SEEED_XIAO: add new board definition
    - README.md: update README to reflect new features and boards
    
    stm32 port:
    - pin: enable GPIO clock of pin if it's constructed without init
    - main: don't unconditionally enable GPIO A,B,C,D clocks
    - boards/VCC_GND_H743VI: add board definition for VCC_GND_H743VI
    - boards/OLIMEX_E407: add Ethernet RMII support
    - boards/LEGO_HUB_NO6: remove user paths from cc2564 init file
    - boards: remove trailing spaces, and add newline at end of file
    - add basic support for STM32H750
    - add support for H7A3(Q)/H7B3(Q), and STM32H73B3I_DK board defn
    - suggest putting code in main.py not boot.py
    - boards/make-pins.py: allow a CPU pin to be hidden
    - boards/make-pins.py: allow empty lines and comments in pins.csv
    - dma: add functions for external users of DMA to enable clock
    - enable LOAD_ATTR fast path, and map lookup caching on >M0
    - boards: add OLIMEX H407 board definition
    - enable platform module
    - extended flash filesystem space to 512K on H743 boards
    - boards/NUCLEO_H743ZI: enable VfsLfs2 on NUCLEO_H743ZI(2) boards
    - boards: add PF11-BOOT0 to stm32f091_af.csv
    - machine_i2c: use hardware I2C for STM32H7
    - sdram: enforce gcc opt, and use volatile and DSB in sdram_test
    - usbd_cdc_interface: allow a board to hook into USBD CDC RX events
    - mpbthciport: allow a board to hook BT HCI poll functions
    - pendsv: allow a board to add entries for pendsv_schedule_dispatch
    - boards: add images to board.json for Adafruit and VCC_GND boards
    - uart: fix race conditions and clearing status in IRQ handler
    - mpconfigport.h: use the "extra" feature level
    - in machine_i2s, send null samples in underflow situations
    - in machine_i2s, make object reference arrays root pointers
    - led: support an extra 2 LEDs in board configuration
    - boards/MIKROE_CLICKER2_STM32: add more detail to board.json
    - boards: add new board MikroElektronika Quail, and F427 support
    - main: run optional frozen module at boot
    - sdio: don't explicitly disable DMA2 on deinit of SDIO
    - dma: make DMA2_Stream3 exclusive to SDIO when CYW43 enabled
    - boards: build NUCLEO_WB55 and STM32F769DISC without mboot enabled
    - boards: add PYBSTICK26 F411 board definition
    - boards/NADHAT_PYBF405: rename board to GARATRONIC_NADHAT_F405
    - usb: use a table of allowed values to simplify usb_mode get/set
    - boards/NUCLEO_WB55: update rfcore_firmwre for new WS
    - flashbdev: support generic flash storage config via link symbols
    - boards: convert F413,F439,H743,L4xx,WB55 to new flash FS config
    - add support for F479 MCUs
    - include HAL MMC code in F4 builds
    - boards/make-pins.py: use cpu pins to define static alt-fun macros
    - boards/NUCLEO_WB55: fix LED ordering
    - boards/LEGO_HUB_NO6: set filesystem label as HUB_NO6
    - boards: remove stray '+' characters at start of lines in ld files
    - boards: remove unused MICROPY_HW_ENABLE_TIMER config
    - boards: enable MICROPY_HW_ENABLE_SERVO on various boards
    - update L4 code to build with latest stm32lib and L4 HAL 1.17.0
    - main: call sdcard_init when only MICROPY_HW_ENABLE_MMCARD enabled
    - sdcard: support 8-bit wide SDIO bus
    - sdcard: add config option to force MM card capacity
    - factoryreset: init vfs flags before calling pyb_flash_init_vfs
    - qspi: fix typo in address comment
    - boards/make-pins.py: generate empty ADC table if needed
    - boards/OLIMEX_H407: fix typo in OLIMEX H407 board.json
    - network_wiznet5k: fix build error with wiznet5k and lwip enabled
    - enable MICROPY_PY_USSL_FINALISER
    
    teensy port:
    - switch to use manifest.py instead of FROZEN_DIR
    
    unix port:
    - enable LOAD_ATTR fast path, and map lookup caching
    - modusocket: support MP_STREAM_POLL in unix socket_ioctl
    - modos: add support for uos.urandom(n)
    - coverage: change remaining printf to mp_printf
    - Makefile: use -Og instead of -O0 for debug builds
    
    windows port:
    - README: remove unsupported Python instructions for Cygwin
    - mpconfigport.h: enable help and help("modules")
    - add support for build variants to windows port
    - run tests via Makefile
    - appveyor: build both standard and dev variants
    - appveyor: build mpy-cross only once for mingw-w64
    - msvc: run qstr preprocessing phase in parallel
    
    zephyr port:
    - mphalport.h: remove unused and unimplemented C-level pin API
    - increase minimum CMake version to 3.20.0
    - update include path to reboot.h
    - get UART console device from devicetree instead of Kconfig
    - use CONFIG_USB_DEVICE_STACK for conditional USB device support
    - upgrade to Zephyr v2.7.0
    - modbluetooth_zephyr: provide dummy connect_cancel function







commit de43b500bdff465539d89c5004d9e8cb3849eab1
Author: Damien George <damien@micropython.org>
Date:   Fri Dec 17 23:35:32 2021 +1100

    py/runtime: Allow initialising sys.path/argv with defaults.
    
    If MICROPY_PY_SYS_PATH_ARGV_DEFAULTS is enabled (which it is by default)
    then sys.path and sys.argv will be initialised and populated with default
    values.  This keeps all bare-metal ports aligned.
    
    Signed-off-by: Damien George <damien@micropython.org>

 mpy-cross/main.c | 2 --
 1 file changed, 2 deletions(-)

commit 7ea1919c05886f7aff62dea60094c47f82cba766
Author: Jeff Epler <jepler@gmail.com>
Date:   Fri Oct 15 08:53:58 2021 -0500

    fix name of windows mpy-cross executable
    
    .. since 1.17, the main part of the build system takes care of adding
    the ".exe" extension.

 mpy-cross/Makefile.static-mingw | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 8d8f83bc05719d611b204f1071c5f386ff8a49be
Merge: 797f0a1ed 7c54b6428
Author: Jeff Epler <jepler@gmail.com>
Date:   Thu Oct 14 14:38:41 2021 -0500

    Merge tag 'v1.17' into merge-1.17
    
    F-strings, new machine.I2S class, ESP32-C3 support and LEGO_HUB_NO6 board
    
    This release of MicroPython adds support for f-strings (PEP-498), with a
    few limitations compared to normal Python.  F-strings are essentially
    syntactic sugar for "".format() and make formatting strings a lot more
    convenient.  Other improvements to the core runtime include pretty printing
    OSError when it has two arguments (an errno code and a string), scheduling
    of KeyboardInterrupt on the main thread, and support for a single argument
    to the optimised form of StopIteration.
    
    In the machine module a new I2S class has been added, with support for
    esp32 and stm32 ports.  This provides a consistent API for transmit and
    receive of audio data in blocking, non-blocking and asyncio-based
    operation.  Also, the json module has support for the "separators" argument
    in the dump and dumps functions, and framebuf now includes a way to blit
    between frame buffers of different formats using a palette.  A new,
    portable machine.bitstream function is also added which can output a stream
    of bits with configurable timing, and is used as the basis for driving
    WS2812 LEDs in a common way across ports.
    
    There has been some restructuring of the repository directory layout, with
    all third-party code now in the lib/ directory.  And a new top-level
    directory shared/ has been added with first-party code that was previously
    in lib/ moved there.
    
    The docs have seen further improvement with enhancements and additions to
    the rp2 parts, as well as a new quick reference for the zephyr port.
    The terms master/slave have been replaced with controller/peripheral,
    mainly relating to I2C and SPI usage.  And u-module references have been
    replaced with just the module name without the u-prefix to help clear up
    the intended usage of modules in MicroPython.
    
    For the esp8266 and esp32 ports, hidden networks are now included in WLAN
    scan results.  On the esp32 the RMT class is enhanced with idle_level and
    write_pulses modes.  There is initial support for ESP32-C3 chips with
    GENERIC_C3 and GENERIC_C3_USB boards.
    
    The javascript port has had its Makefile and garbage collector
    implementation reworked so it compiles and runs with latest the Emscripten
    using asyncify.
    
    The mimxrt port sees the addition of hardware I2C and SPI support, as well
    as some additional methods to the machine module.  There is also support
    for Hyperflash chips.
    
    The nrf port now has full VFS storage support, enables source-line on
    traceback, and has .mpy features consistent with other ports.
    
    For the rp2 port there is now more configurability for boards, and more
    boards added.
    
    The stm32 port has a new LEGO_HUB_NO6 board definition with detailed
    information how to get this LEGO Hub running stock MicroPython.  There is
    also now support to change the CPU frequency on STM32WB MCUs.  And USBD_xxx
    descriptor options have been renamed to MICROPY_HW_USB_xxx.
    
    Thanks to everyone who contributed to this release: Amir Gonnen, Andrew
    Scheller, Bryan Tong Minh, Chris Wilson, Damien George, Daniel Mizyrycki,
    David Lechner, David P, Fernando, finefoot, Frank Pilhofer, Glenn Ruben
    Bakke, iabdalkader, Jeff Epler, Jim Mussared, Jonathan Hogg, Josh Klar,
    Josh Lloyd, Julia Hathaway, Krzysztof Adamski, Matúš Olekšák, Michael
    Weiss, Michel Bouwmans, Mike Causer, Mike Teachman, Ned Konz, NitiKaur,
    oclyke, Patrick Van Oosterwijck, Peter Hinch, Peter Züger, Philipp
    Ebensberger, robert-hh, Roberto Colistete Jr, Sashkoiv, Seon Rozenblum,
    Tobias Thyrrestrup, Tom McDermott, Will Sowerbutts, Yonatan Goldschmidt.
    
    What follows is a detailed list of changes, generated from the git commit
    history, and organised into sections.
    
    Main components
    ===============
    
    all:
    - fix signed shifts and NULL access errors from -fsanitize=undefined
    - update to point to files in new shared/ directory
    
    py core:
    - mpstate: make exceptions thread-local
    - mpstate: schedule KeyboardInterrupt on main thread
    - mperrno: add MP_ECANCELED error code
    - makeqstrdefs.py: don't include .h files explicitly in preprocessing
    - mark unused arguments from bytecode decoding macros
    - objexcept: pretty print OSError also when it has 2 arguments
    - makeversionhdr: add --tags arg to git describe
    - vm: simplify handling of MP_OBJ_STOP_ITERATION in yield-from opcode
    - objexcept: make mp_obj_exception_get_value support subclassed excs
    - support single argument to optimised MP_OBJ_STOP_ITERATION
    - introduce and use mp_raise_type_arg helper
    - modsys: optimise sys.exit for code size by using exception helpers
    - objexcept: make mp_obj_new_exception_arg1 inline
    - obj: fix formatting of comment for mp_obj_is_integer
    - emitnative: reuse need_reg_all func in need_stack_settled
    - emitnative: ensure stack settling is safe mid-branch
    - runtime: fix bool unary op for subclasses of native types
    - builtinimport: fix condition for including do_execute_raw_code()
    - mkrules: automatically build mpy-cross if it doesn't exist
    - implement partial PEP-498 (f-string) support
    - lexer: clear fstring_args vstr on lexer free
    - mkrules.mk: do submodule sync in "make submodules"
    
    extmod:
    - btstack: add missing call to mp_bluetooth_hci_uart_deinit
    - btstack: check that BLE is active before performing operations
    - uasyncio: get addr and bind server socket before creating task
    - axtls-include: add axtls_os_port.h to customise axTLS
    - update for move of crypto-algorithms, re1.5, uzlib to lib
    - moduselect: conditionally compile select()
    - nimble: fix leak in l2cap_send if send-while-stalled
    - btstack/btstack.mk: use -Wno-implicit-fallthrough, not =0
    - utime: always invoke mp_hal_delay_ms when >= to 0ms
    - modbluetooth: clamp MTU values to 32->UINT16_MAX
    - nimble: allow modbluetooth binding to hook "sent HCI packet"
    - nimble: add "memory stalling" mechanism for l2cap_send
    - uasyncio: in open_connection use address info in socket creation
    - modujson: add support for dump/dumps separators keyword-argument
    - modlwip: fix close and clean up of UDP and raw sockets
    - modbluetooth: add send_update arg to gatts_write
    - add machine.bitstream
    - modframebuf: enable blit between different formats via a palette
    
    lib:
    - tinyusb: update to version 0.10.1
    - pico-sdk: update to version 1.2.0
    - utils/stdout_helpers: make mp_hal_stdout_tx_strn_cooked efficient
    - axtls: switch to repo at micropython/axtls
    - axtls: update to latest axtls 2.1.5 wih additional commits
    - re1.5: move re1.5 code from extmod to lib
    - uzlib: move uzlib code from extmod to lib
    - crypto-algorithms: move crypto-algorithms code from extmod to lib
    - update README's based on contents of these dirs
    
    drivers:
    - neopixel: add common machine.bitstream-based neopixel module
    - neopixel: optimize fill() for speed
    - neopixel: reduce code size of driver
    - cyw43: fix cyw43_deinit so it can be called many times in a row
    - cyw43: make wifi join fail if interface is not active
    
    mpy-cross:
    - disable stack check when building with Emscripten
    
    Support components
    ==================
    
    docs:
    - library: document new esp32.RMT features and fix wait_done
    - library: warn that ustruct doesn't handle spaces in format strings
    - esp8266/tutorial: change flash mode from dio to dout
    - replace master/slave with controller/peripheral in I2C and SPI
    - rp2: enhance quickref and change image to Pico pinout
    - rp2: update general section to give a brief technical overview
    - library/utime.rst: clarify behaviour and precision of sleep ms/us
    - library/uasyncio.rst: document stream readexactly() method
    - library/machine.I2S.rst: fix use of sd pin in examples
    - zephyr: add quick reference for the Zephyr port
    - library/zephyr: add libraries specific to the Zephyr port
    - templates: add unix and zephyr quickref links to top-index
    - rename ufoo.rst to foo.rst
    - replace ufoo with foo in all docs
    - library/index.rst: clarify module naming and purpose
    - library/builtins.rst: add module title
    - library/network.rst: simplify socket import
    - add docs for machine.bitstream and neopixel module
    - library: fix usage of :term: for frozen module reference
    - esp8266: use monospace for software tools
    - reference: mention that slicing a memoryview causes allocation
    
    examples: no changes specific to this component/port
    
    tests:
    - extmod: make uasyncio_heaplock test more deterministic
    - cpydiff/modules_struct_whitespace_in_format: run black
    - extmod/ujson: add tests for dump/dumps separators argument
    - run-multitests.py: add broadcast and wait facility
    - multi_bluetooth/ble_subscribe.py: add test for subscription
    - extmod/vfs_fat_finaliser.py: ensure alloc at never-used GC blocks
    - basics: split f-string debug printing to separate file with .exp
    - pybnative: make while.py test run on boards without pyb.delay
    
    tools:
    - autobuild: add scripts to build release firmware
    - remove obsolete build-stm-latest.sh script
    - ci.sh: run apt-get update in ci_powerpc_setup
    - makemanifest.py: allow passing flags to mpy-tool.py
    - autobuild: add mimxrt port to build scripts for nightly builds
    - pyboard.py: add cmd-line option to make soft reset configurable
    - mpremote: swap order of PID and VID in connect-list output
    - ci.sh: build unix dev variant as part of macOS CI
    - ci.sh: build GENERIC_C3 board as part of esp32 CI
    - autobuild: use separate IDF version to build newer esp32 SoCs
    - autobuild: add FeatherS2 and TinyS2 to esp32 auto builds
    - mpremote: add seek whence for mounted files
    - mpremote: raise OSError on unsupported RemoteFile.seek
    - autobuild: add the MIMXRT1050_EVKB board to the daily builds
    - ci.sh: add mpy-cross build to nrf port
    - codeformat.py: include ports/nrf/modules/nrf in code formatting
    - gen-cpydiff.py: don't rename foo to ufoo in diff output
    - autobuild: add auto build for Silicognition wESP32
    - mpremote: fix connect-list in case VID/PID are None
    - mpremote: add "devs" shortcut for "connect list"
    - mpremote: remove support for pyb.USB_VCP in/out specialisation
    - autobuild: don't use "-B" for make, it's already a fresh build
    - pyboard.py: move --no-exclusive/--soft-reset out of mutex group
    - pyboard.py: make --no-follow use same variable as --follow
    - pyboard.py: add --exclusive to match --no-exclusive
    - pyboard.py: make --no-soft-reset consistent with other args
    - uncrustify: force 1 newline at end of file
    - mpremote: bump version to 0.0.6
    
    CI:
    - workflows: add workflow to build and test javascript port
    - workflows: switch from Coveralls to Codecov
    - workflows: switch from lcov to gcov
    - workflows: add workflow to build and test unix dev variant
    
    The ports
    =========
    
    all ports:
    - use common mp_hal_stdout_tx_strn_cooked instead of custom one
    - update for move of crypto-algorithms, uzlib to lib
    - rename USBD_VID/PID config macros to MICROPY_HW_USB_VID/PID
    
    bare-arm port: no changes specific to this component/port
    
    cc3200 port: no changes specific to this component/port
    
    esp8266 port:
    - add __len__ to NeoPixel driver to support iterating
    - Makefile: add more libm files to build
    - include hidden networks in WLAN.scan results
    - replace esp.neopixel with machine.bitstream
    - remove dead code for end_ticks in machine_bitstream
    
    esp32 port:
    - boards/sdkconfig.base: disable MEMPROT_FEATURE to alloc from IRAM
    - add __len__ to NeoPixel driver to support iterating
    - main: allow MICROPY_DIR to be overridden
    - esp32_rmt: fix RMT looping in newer IDF versions
    - esp32_rmt: enhance RMT with idle_level and write_pulses modes
    - add new machine.I2S class for I2S protocol support
    - machine_spi: calculate actual attained baudrate
    - machine_hw_spi: use a 2 item SPI queue for long transfers
    - machine_dac: add MICROPY_PY_MACHINE_DAC option, enable by default
    - machine_i2s: add MICROPY_PY_MACHINE_I2S option, enable by default
    - fix use of mp_int_t, size_t and uintptr_t
    - add initial support for ESP32C3 SoCs
    - boards/GENERIC_C3: add generic C3-based board
    - modmachine: release the GIL in machine.idle()
    - mphalport: always yield at least once in delay_ms
    - machine_uart: add flow kw-arg to enable hardware flow control
    - boards: add Silicognition wESP32 board configuration
    - mpconfigport.h: enable reverse and inplace special methods
    - include hidden networks in WLAN.scan results
    - makeimg.py: get bootloader and partition offset from sdkconfig
    - enable MICROPY_PY_FSTRINGS by default
    - machine_hw_spi: release GIL during transfers
    - machine_pin: make check for non-output pins respect chip variant
    - replace esp.neopixel with machine.bitstream
    - remove dead code for end_ticks in machine_bitstream
    - boards: add GENERIC_C3_USB board with USB serial/JTAG support
    
    javascript port:
    - rework Makefile and GC so it works with latest Emscripten
    - Makefile: suppress compiler errors from array bounds
    - Makefile: change variable to EXPORTED_RUNTIME_METHODS
    
    mimxrt port:
    - move calc_weekday helper function to timeutils
    - machine_spi: add the SPI class to the machine module
    - moduos: seed the PRNG on boot using the TRNG
    - boards: set vfs partition start to 1 MBbyte
    - main: skip running main.py if boot.py failed
    - main: extend the information returned by help()
    - mimxrt_flash: remove commented-out code
    - modmachine: add a few minor methods to the machine module
    - machine_led: use mp_raise_msg_varg helper
    - machine_i2c: add hardware-based machine.I2C to machine module
    - add support for Hyperflash chips
    - boards: add support for the MIMXRT1050_EVKB board
    - machine_pin: implement ioctl for Pin
    
    minimal port:
    - Makefile: add support for building with user C modules
    
    nrf port:
    - modules: replace master/slave with controller/peripheral in SPI
    - boards/common.ld: calculate unused flash region
    - modules/nrf: add new nrf module with flash block device
    - drivers: add support for using flash block device with SoftDevice
    - mpconfigport.h: expose nrf module when MICROPY_PY_NRF is set
    - README: update README.md to reflect internal file systems
    - mpconfigport.h: tune FAT FS configuration
    - Makefile: add _fs_size linker script override from make
    - modules/uos: allow a board to configure MICROPY_VFS_FAT/LFS1/LFS2
    - mpconfigport.h: enable MICROPY_PY_IO_FILEIO when an FS is enabled
    - qstrdefsport.h: add entries for in-built FS mount points
    - main: add auto mount and auto format hook for internal flash FS
    - boards: enable needed features for FAT/LFS1/LFS2
    - facilitate use of freeze manifest
    - boards: set FROZEN_MANIFEST blank when SD present on nrf51 targets
    - modules/scripts: add file system formatting script
    - Makefile: set default manifest file for all targets
    - mphalport: add dummy function for mp_hal_time_ns()
    - boards: enable MICROPY_VFS_LFS2 for all target boards
    - modules/uos: add ilistdir to uos module
    - modules/nrf: add function to enable/disable DCDC
    - enable source line on tracebacks
    - set .mpy features consistent with documentation and other ports
    
    pic16bit port: no changes specific to this component/port
    
    powerpc port: no changes specific to this component/port
    
    qemu-arm port: no changes specific to this component/port
    
    rp2 port:
    - use 0=Monday datetime convention in RTC
    - machine_rtc: in RTC.datetime, compute weekday automatically
    - CMakeLists.txt: suppress compiler errors for pico-sdk and tinyusb
    - tusb_config.h: set CFG_TUD_CDC_EP_BUFSIZE to 256
    - machine_uart: add hardware flow control support
    - machine_uart: allow overriding default machine UART pins
    - machine_i2c: allow boards to configure I2C pins using new macros
    - machine_spi: allow boards to configure SPI pins using new macros
    - machine_uart: fix poll ioctl to also check hardware FIFO
    - machine_uart: fix read when FIFO has chars but ringbuf doesn't
    - tusb_port: allow boards to configure USB VID and PID
    - boards/ADAFRUIT_FEATHER_RP2040: configure custom VID/PID
    - boards/ADAFRUIT_FEATHER_RP2040: configure I2C/SPI default pins
    - boards/SPARKFUN_PROMICRO: configure UART/I2C/SPI default pins
    - boards/SPARKFUN_THINGPLUS: configure I2C/SPI default pins
    - boards: add Adafruit ItsyBitsy RP2040
    - boards: add Adafruit QT Py RP2040
    - boards: add Pimoroni Pico LiPo 4MB
    - boards: add Pimoroni Pico LiPo 16MB
    - boards: add Pimoroni Tiny 2040
    - CMakeLists.txt: allow a board's cmake to set the manifest path
    - enable MICROPY_PY_FSTRINGS by default
    - Makefile: add "submodules" target, to match other ports
    - rp2_flash: disable IRQs while calling flash_erase/program
    - CMakeLists.txt: add option to enable double tap reset to bootrom
    - mpconfigport.h: allow boards to add root pointers
    
    samd port:
    - add support for building with user C modules
    
    stm32 port:
    - softtimer: add soft_timer_reinsert() helper function
    - mpbthciport: change from systick to soft-timer for BT scheduling
    - provide a custom BTstack runloop that integrates with soft timer
    - usb: make irq's default trigger enable all events
    - boardctrl: skip running main.py if boot.py had an error
    - sdio: fix undefined reference to DMA stream on H7
    - dma: add DMAMUX configuration for H7 to fix dma_nohal_init
    - main: call mp_deinit() at end of main
    - adc: allow using ADC12 and ADC3 for H7
    - adc: define the ADC instance used for internal channels
    - adc: simplify and generalise how pin_adcX table is defined
    - add new machine.I2S class for I2S protocol support
    - boards/NUCLEO_F446RE: fix I2C1 pin assignment to match datasheet
    - replace master/slave with controller/peripheral in I2C and SPI
    - systick: always POLL_HOOK when delaying for milliseconds
    - sdram: make SDRAM test cache aware, and optional failure with msg
    - boards/NUCLEO_F446RE: enable CAN bus support
    - boards: add support for SparkFun STM32 MicroMod Processor board
    - uart: fix LPUART1 baudrate set/get
    - uart: support low baudrates on LPUART1
    - boards/STM32F429DISC: set correct UART2 pins and add UART3/6
    - boards/NUCLEO_F439ZI: add board definition for NUCLEO_F439ZI
    - boards/LEGO_HUB_NO6: add board definition for LEGO_HUB_NO6
    - Makefile: update to only pull in used Bluetooth library
    - README.md: update supported MCUs, and submodule and mboot use
    - usbd_desc: rename USBD_xxx descriptor opts to MICROPY_HW_USB_xxx
    - usbd_cdc_interface: rename USBD_CDC_xx opts to MICROPY_HW_USB_xx
    - powerctrl: support changing frequency on WB MCUs
    - boards/NUCLEO_H743ZI2: add modified version of NUCLEO_H743ZI
    - mbedtls: fix compile warning about uninitialized val
    - enable MICROPY_PY_FSTRINGS by default
    - add implementation of machine.bitstream
    - Makefile: allow GIT_SUBMODULES and LIBS to be extended
    - stm32_it: support TIM17 IRQs on WB MCUs
    - disable computed goto on constrained boards
    - storage: make extended-block-device more configurable
    - boards/LEGO_HUB_NO6: change SPI flash storage to use hardware SPI
    - boards/LEGO_HUB_NO6: skip first 1MiB of SPI flash for storage
    - boards/LEGO_HUB_NO6: add make commands to backup/restore firmware
    
    teensy port: no changes specific to this component/port
    
    unix port:
    - modffi: add option to lock GC in callback, and cfun access
    - Makefile: add back LIB_SRC_C to list of object files
    - variants: enable help and help("modules") on standard and dev
    - Makefile: disable error compression on arm-linux-gnueabi-gcc
    
    windows port:
    - Makefile: add .exe extension to executables name
    - appveyor: update to VS 2017 and use Python 3.8 for build/test
    
    zephyr port:
    - machine_spi: add support for hardware SPI

commit b326edf68c5edb648fac4dc2a3403ee33510e179
Author: Jim Mussared <jim.mussared@gmail.com>
Date:   Mon Sep 6 12:28:06 2021 +1000

    all: Remove MICROPY_OPT_CACHE_MAP_LOOKUP_IN_BYTECODE.
    
    This commit removes all parts of code associated with the existing
    MICROPY_OPT_CACHE_MAP_LOOKUP_IN_BYTECODE optimisation option, including the
    -mcache-lookup-bc option to mpy-cross.
    
    This feature originally provided a significant performance boost for Unix,
    but wasn't able to be enabled for MCU targets (due to frozen bytecode), and
    added significant extra complexity to generating and distributing .mpy
    files.
    
    The equivalent performance gain is now provided by the combination of
    MICROPY_OPT_LOAD_ATTR_FAST_PATH and MICROPY_OPT_MAP_LOOKUP_CACHE (which has
    been enabled on the unix port in the previous commit).
    
    It's hard to provide precise performance numbers, but tests have been run
    on a wide variety of architectures (x86-64, ARM Cortex, Aarch64, RISC-V,
    xtensa) and they all generally agree on the qualitative improvements seen
    by the combination of MICROPY_OPT_LOAD_ATTR_FAST_PATH and
    MICROPY_OPT_MAP_LOOKUP_CACHE.
    
    For example, on a "quiet" Linux x64 environment (i3-5010U @ 2.10GHz) the
    change from CACHE_MAP_LOOKUP_IN_BYTECODE, to LOAD_ATTR_FAST_PATH combined
    with MAP_LOOKUP_CACHE is:
    
    diff of scores (higher is better)
    N=2000 M=2000       bccache -> attrmapcache      diff      diff% (error%)
    bm_chaos.py        13742.56 ->   13905.67 :   +163.11 =  +1.187% (+/-3.75%)
    bm_fannkuch.py        60.13 ->      61.34 :     +1.21 =  +2.012% (+/-2.11%)
    bm_fft.py         113083.20 ->  114793.68 :  +1710.48 =  +1.513% (+/-1.57%)
    bm_float.py       256552.80 ->  243908.29 : -12644.51 =  -4.929% (+/-1.90%)
    bm_hexiom.py         521.93 ->     625.41 :   +103.48 = +19.826% (+/-0.40%)
    bm_nqueens.py     197544.25 ->  217713.12 : +20168.87 = +10.210% (+/-3.01%)
    bm_pidigits.py      8072.98 ->    8198.75 :   +125.77 =  +1.558% (+/-3.22%)
    misc_aes.py        17283.45 ->   16480.52 :   -802.93 =  -4.646% (+/-0.82%)
    misc_mandel.py     99083.99 ->  128939.84 : +29855.85 = +30.132% (+/-5.88%)
    misc_pystone.py    83860.10 ->   82592.56 :  -1267.54 =  -1.511% (+/-2.27%)
    misc_raytrace.py   21490.40 ->   22227.23 :   +736.83 =  +3.429% (+/-1.88%)
    
    This shows that the new optimisations are at least as good as the existing
    inline-bytecode-caching, and are sometimes much better (because the new
    ones apply caching to a wider variety of map lookups).
    
    The new optimisations can also benefit code generated by the native
    emitter, because they apply to the runtime rather than the generated code.
    The improvement for the native emitter when LOAD_ATTR_FAST_PATH and
    MAP_LOOKUP_CACHE are enabled is (same Linux environment as above):
    
    diff of scores (higher is better)
    N=2000 M=2000        native -> nat-attrmapcache  diff      diff% (error%)
    bm_chaos.py        14130.62 ->   15464.68 :  +1334.06 =  +9.441% (+/-7.11%)
    bm_fannkuch.py        74.96 ->      76.16 :     +1.20 =  +1.601% (+/-1.80%)
    bm_fft.py         166682.99 ->  168221.86 :  +1538.87 =  +0.923% (+/-4.20%)
    bm_float.py       233415.23 ->  265524.90 : +32109.67 = +13.756% (+/-2.57%)
    bm_hexiom.py         628.59 ->     734.17 :   +105.58 = +16.796% (+/-1.39%)
    bm_nqueens.py     225418.44 ->  232926.45 :  +7508.01 =  +3.331% (+/-3.10%)
    bm_pidigits.py      6322.00 ->    6379.52 :    +57.52 =  +0.910% (+/-5.62%)
    misc_aes.py        20670.10 ->   27223.18 :  +6553.08 = +31.703% (+/-1.56%)
    misc_mandel.py    138221.11 ->  152014.01 : +13792.90 =  +9.979% (+/-2.46%)
    misc_pystone.py    85032.14 ->  105681.44 : +20649.30 = +24.284% (+/-2.25%)
    misc_raytrace.py   19800.01 ->   23350.73 :  +3550.72 = +17.933% (+/-2.79%)
    
    In summary, compared to MICROPY_OPT_CACHE_MAP_LOOKUP_IN_BYTECODE, the new
    MICROPY_OPT_LOAD_ATTR_FAST_PATH and MICROPY_OPT_MAP_LOOKUP_CACHE options:
    - are simpler;
    - take less code size;
    - are faster (generally);
    - work with code generated by the native emitter;
    - can be used on embedded targets with a small and constant RAM overhead;
    - allow the same .mpy bytecode to run on all targets.
    
    See #7680 for further discussion.  And see also #7653 for a discussion
    about simplifying mpy-cross options.
    
    Signed-off-by: Jim Mussared <jim.mussared@gmail.com>

 mpy-cross/README.md      | 5 +----
 mpy-cross/main.c         | 6 ------
 mpy-cross/mpconfigport.h | 2 --
 3 files changed, 1 insertion(+), 12 deletions(-)

commit 692d36d779192f32371f7f9daa845b566f26968d
Author: Jim Mussared <jim.mussared@gmail.com>
Date:   Fri Aug 13 01:44:08 2021 +1000

    py: Implement partial PEP-498 (f-string) support.
    
    This implements (most of) the PEP-498 spec for f-strings and is based on
    https://github.com/micropython/micropython/pull/4998 by @klardotsh.
    
    It is implemented in the lexer as a syntax translation to `str.format`:
      f"{a}" --> "{}".format(a)
    
    It also supports:
      f"{a=}" --> "a={}".format(a)
    
    This is done by extracting the arguments into a temporary vstr buffer,
    then after the string has been tokenized, the lexer input queue is saved
    and the contents of the temporary vstr buffer are injected into the lexer
    instead.
    
    There are four main limitations:
    - raw f-strings (`fr` or `rf` prefixes) are not supported and will raise
      `SyntaxError: raw f-strings are not supported`.
    
    - literal concatenation of f-strings with adjacent strings will fail
        "{}" f"{a}" --> "{}{}".format(a)    (str.format will incorrectly use
                                             the braces from the non-f-string)
        f"{a}" f"{a}" --> "{}".format(a) "{}".format(a) (cannot concatenate)
    
    - PEP-498 requires the full parser to understand the interpolated
      argument, however because this entirely runs in the lexer it cannot
      resolve nested braces in expressions like
        f"{'}'}"
    
    - The !r, !s, and !a conversions are not supported.
    
    Includes tests and cpydiffs.
    
    Signed-off-by: Jim Mussared <jim.mussared@gmail.com>

 mpy-cross/mpconfigport.h | 1 +
 1 file changed, 1 insertion(+)







commit 136369d72f5b99ec23c9c9f178a590bde968e2ee
Author: Damien George <damien@micropython.org>
Date:   Fri Jul 9 14:19:15 2021 +1000

    all: Update to point to files in new shared/ directory.
    
    Signed-off-by: Damien George <damien@micropython.org>

 mpy-cross/Makefile          | 2 +-
 mpy-cross/gccollect.c       | 2 +-
 mpy-cross/mpy-cross.vcxproj | 4 ++--
 3 files changed, 4 insertions(+), 4 deletions(-)

commit 115acadf9211fddc8b5857af287daa622dc615c1
Author: David Lechner <david@lechnology.com>
Date:   Mon Jun 1 12:18:58 2020 -0500

    mpy-cross: Disable stack check when building with Emscripten.
    
    `mpy-cross` can be compiled to WASM using Emscripten, but it is not happy
    unless the stack check is disabled.
    
    Signed-off-by: David Lechner <david@pybricks.com>

 mpy-cross/mpconfigport.h | 2 ++
 1 file changed, 2 insertions(+)

commit dbf9918f78323dc135019eb3b9148887948a3132
Author: Jeff Epler <jepler@gmail.com>
Date:   Tue Jun 1 12:46:31 2021 -0500

    mpy-cross: Remove bug workaround, debug print

 mpy-cross/Makefile.m1 | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

commit ed977e9f25049a097a35fbf5106cf6e6f3ed772d
Author: Jeff Epler <jepler@gmail.com>
Date:   Sun May 30 11:59:57 2021 -0500

    mpy-cross: Build an arm64 (M1) bin and a universal bin

 mpy-cross/Makefile.m1 | 11 +++++++++++
 1 file changed, 11 insertions(+)

commit 966d25c6a5967f74fe4a97e324a3400da09cae43
Merge: a70fc0cae 321d1897c
Author: Scott Shawcroft <scott@adafruit.com>
Date:   Tue May 11 17:31:27 2021 -0700

    Merge MicroPython v1.15 into CircuitPython

commit e02a26453c0bcc0c148d78698cc2cbb8b05fe20b
Merge: 4eb4f1484 78b23c3a1
Author: Scott Shawcroft <scott@adafruit.com>
Date:   Mon May 10 15:20:47 2021 -0700

    Merge MicroPython 1.14 into CircuitPython

commit 42f4065c8a691f6d421e19724c756f8255c40017
Merge: 71d253672 ebf9dcb47
Author: Scott Shawcroft <scott@adafruit.com>
Date:   Thu May 6 11:17:53 2021 -0700

    Merge remote-tracking branch 'adafruit/main' into merge_1.13

commit ef3ec93c8bc3785dd210335aac458e873813bd1b
Author: Jeff Epler <jepler@gmail.com>
Date:   Wed May 5 18:04:41 2021 -0500

    Change the first byte of CircuitPython 'mpy' files to "C"
    
    .. and also distinguish CircuitPython better in `mpy-cross --version`

 mpy-cross/main.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

commit b9f349779eaec113932e33a22f8c3247baa3e862
Author: Jeff Epler <jepler@gmail.com>
Date:   Wed May 5 13:24:08 2021 -0500

    Build an aarch64 version of mpy-cross

 mpy-cross/Makefile.static-aarch64 | 10 ++++++++++
 1 file changed, 10 insertions(+)

commit f0bb26d70fd02fc39a7f70405d9ca96b685dded0
Merge: f5f18b2ce b0932fcf2
Author: Scott Shawcroft <scott@adafruit.com>
Date:   Tue May 4 11:40:55 2021 -0700

    Merge MicroPython 1.13 into CircuitPython

commit b35fa44c8adeae93000ca9bc413ea6e64456fd94
Author: Scott Shawcroft <scott@adafruit.com>
Date:   Fri Apr 23 12:26:42 2021 -0700

    Merge MicroPython 1.12 into CircuitPython

 mpy-cross/README.md         |   6 +++
 mpy-cross/main.c            |  38 +++++++++++++++-
 mpy-cross/mpconfigport.h    |  38 ++++++++++++++++
 mpy-cross/mpy-cross.vcxproj | 103 ++++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 183 insertions(+), 2 deletions(-)

commit dfa7c3d32de122bc3d07d9f2880cb82ad953385c
Author: Jeff Epler <jepler@gmail.com>
Date:   Fri Apr 30 15:30:13 2021 -0500

    codeformat: Fix handling of `**`
    
    After discussing with danh, I noticed that `a/**/b` would not match `a/b`.
    
    After correcting this and re-running "pre-commit run --all", additional
    files were reindented, including the codeformat script itself.

 mpy-cross/main.c | 32 ++++++++++++++++----------------
 1 file changed, 16 insertions(+), 16 deletions(-)

commit 76033d5115889d779debfddc14c6990df31de799
Author: Scott Shawcroft <scott@adafruit.com>
Date:   Thu Apr 22 17:55:39 2021 -0700

    Merge MicroPython v1.11 into CircuitPython

 mpy-cross/Makefile       |  2 ++
 mpy-cross/gccollect.c    |  3 ---
 mpy-cross/main.c         | 63 +++++++++++++++++++++++++++++++++++-------------
 mpy-cross/mpconfigport.h | 20 +++++++--------
 4 files changed, 57 insertions(+), 31 deletions(-)

commit 09f7b43c644e54194132542cf6f0983bb985de0c
Merge: 18548fc5d b057fb8a4
Author: Scott Shawcroft <scott@adafruit.com>
Date:   Tue Apr 20 18:04:23 2021 -0700

    Merge MicroPython 1.10 into CircuitPython

commit a52eb88031620a81521b937f2a0651dbac2bb350
Author: microDev <70126934+microDev1@users.noreply.github.com>
Date:   Mon Mar 15 19:27:36 2021 +0530

    run code formatting script

 mpy-cross/fmode.c        |  6 ++--
 mpy-cross/gccollect.c    | 20 ++++++------
 mpy-cross/main.c         | 47 +++++++++++++--------------
 mpy-cross/mpconfigport.h | 82 ++++++++++++++++++++++++------------------------
 4 files changed, 78 insertions(+), 77 deletions(-)

commit ad4656b861f94277bed9647ca176e662ce5119e3
Author: Damien George <damien@micropython.org>
Date:   Thu Feb 4 16:39:09 2021 +1100

    all: Rename BYTES_PER_WORD to MP_BYTES_PER_OBJ_WORD.
    
    The "word" referred to by BYTES_PER_WORD is actually the size of mp_obj_t
    which is not always the same as the size of a pointer on the target
    architecture.  So rename this config value to better reflect what it
    measures, and also prefix it with MP_.
    
    For uses of BYTES_PER_WORD in setting the stack limit this has been
    changed to sizeof(void *), because the stack usually grows with
    machine-word sized values (eg an nlr_buf_t has many machine words in it).
    
    Signed-off-by: Damien George <damien@micropython.org>

 mpy-cross/main.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

commit cb30928ac8da931f905d1c14468498d21108933a
Author: David CARLIER <devnexen@gmail.com>
Date:   Sat Jan 16 20:48:19 2021 +0000

    py/persistentcode: Introduce MICROPY_PERSISTENT_CODE_SAVE_FILE option.
    
    This should be enabled when the mp_raw_code_save_file function is needed.
    
    It is enabled for mpy-cross, and a check for defined(__APPLE__) is added to
    cover Mac M1 systems.

 mpy-cross/mpconfigport.h | 8 ++++++++
 1 file changed, 8 insertions(+)

commit bef412789ea93c521bd9c2dddc22b9b3484da574
Author: Emil Renner Berthing <esmil@mailme.dk>
Date:   Sat Oct 3 11:29:16 2020 +0200

    mpy-cross: Enable more warnings.

 mpy-cross/Makefile | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit f51e75c1d216de5ce0c4cdb985756d9cf2b73f4c
Author: Dan Halbert <halbert@adafruit.com>
Date:   Thu Oct 15 15:24:24 2020 -0400

    cxd56 needed more precise include for __packed; needed SRC_C += on some ports

 mpy-cross/mpy-cross.mk | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit b1d210cca728066a7ab0188ab76428e96b4e0ced
Author: Jeff Epler <jepler@gmail.com>
Date:   Sun Aug 16 21:33:36 2020 -0500

    remove trailing whitespace

 mpy-cross/Makefile.static-raspbian | 1 -
 1 file changed, 1 deletion(-)

commit ead2554c78d698bf5e70a3afd33d1154885e60d5
Author: Jeff Epler <jepler@gmail.com>
Date:   Sun Aug 16 21:17:41 2020 -0500

    mpy-cross: Silently clone when building for static-raspbian
    
    Also move the construct earlier.  This prevents the message
    ```
    make: pitools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin/arm-linux-gnueabihf-gcc: Command not found
    ```
    from occurring during the first build, since make was evaluating the line
    ```
    mpy-cross.mk:COMPILER_TARGET := $(shell $(CC) -dumpmachine)
    ```
    before $(CC) was created by the clone.  Nothing bad seems to have come of
    this, but it's nice to fix it anyhow.  (And interesting that it was lost
    among the spewed messages we're removing now)

 mpy-cross/Makefile.static-raspbian | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit e666e86035d533acf657c4ef1e247f84ea0a6f2d
Author: Jeff Epler <jepler@gmail.com>
Date:   Sun Aug 2 20:42:10 2020 -0500

    mpy-cross: fix dependency analysis
    
    Closes: #3074

 mpy-cross/mpy-cross.mk | 2 ++
 1 file changed, 2 insertions(+)

commit 51a79b1af7fa663bb078136611705c04df12970a
Author: Kenny <WarriorOfWire@users.noreply.github.com>
Date:   Tue Jul 21 00:01:22 2020 -0700

    add coroutine behavior for generators
    
    coroutines don't have __next__; they also call themselves coroutines.
    This does not change the fact that `async def` methods are generators,
    but it does make them behave more like CPython.

 mpy-cross/mpconfigport.h | 1 +
 1 file changed, 1 insertion(+)

commit 34b4993d63a6b576f29d624385c681f679b4124c
Author: Diego Elio Pettenò <flameeyes@flameeyes.com>
Date:   Wed Jun 3 23:40:05 2020 +0100

    Add license to some obvious files.

 mpy-cross/.gitignore               |  4 ++++
 mpy-cross/Makefile                 |  4 ++++
 mpy-cross/Makefile.fuzz            |  3 +++
 mpy-cross/Makefile.static          |  4 ++++
 mpy-cross/Makefile.static-mingw    |  4 ++++
 mpy-cross/Makefile.static-raspbian |  4 ++++
 mpy-cross/README.md                |  6 ++++++
 mpy-cross/fmode.c                  | 29 ++++-------------------------
 mpy-cross/fmode.h                  | 30 +++++-------------------------
 mpy-cross/gccollect.c              | 29 ++++-------------------------
 mpy-cross/main.c                   | 29 ++++-------------------------
 mpy-cross/mpconfigport.h           | 29 ++++-------------------------
 mpy-cross/mphalport.h              |  4 ++++
 mpy-cross/mpy-cross.mk             |  4 ++++
 mpy-cross/qstrdefsport.h           |  4 ++++
 15 files changed, 62 insertions(+), 125 deletions(-)

commit dd5d7c86d22807c021dd1711eb7dd3daebc5cfcf
Author: Diego Elio Pettenò <flameeyes@flameeyes.com>
Date:   Sat May 30 10:44:13 2020 +0100

    Fix up end of file and trailing whitespace.
    
    This can be enforced by pre-commit, but correct it separately to make it easier to review.

 mpy-cross/mpconfigport.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 5c8bf12acf3d4cc4cebf971a6f61508559a28143
Author: Damien George <damien.p.george@gmail.com>
Date:   Thu Apr 30 12:30:27 2020 +1000

    all: Fix auto-enable of MICROPY_GCREGS_SETJMP to select GC behaviour.
    
    Only enable it if MICROPY_GCREGS_SETJMP is not already defined, and no
    supported architecture is defined.

 mpy-cross/mpconfigport.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 710426024aece6d248c26bef6627bc3fac13f612
Author: Jim Mussared <jim.mussared@gmail.com>
Date:   Thu Apr 23 16:12:55 2020 +1000

    all: Factor gchelper code to one place and use it for unix & ARM ports.
    
    No functionality change is intended with this commit, it just consolidates
    the separate implementations of GC helper code to the lib/utils/ directory
    as a general set of helper functions useful for any port.  This reduces
    duplication of code, and makes it easier for future ports or embedders to
    get the GC implementation correct.
    
    Ports should now link against gchelper_native.c and either gchelper_m0.s or
    gchelper_m3.s (currently only Cortex-M is supported but other architectures
    can follow), or use the fallback gchelper_generic.c which will work on
    x86/x64/ARM.
    
    The gc_helper_get_sp function from gchelper_m3.s is not really GC related
    and was only used by cc3200, so it has been moved to that port and renamed
    to cortex_m3_get_sp.

 mpy-cross/Makefile          |   1 +
 mpy-cross/gccollect.c       | 113 ++------------------------------------------
 mpy-cross/mpconfigport.h    |  11 ++---
 mpy-cross/mpy-cross.vcxproj |   3 ++
 4 files changed, 10 insertions(+), 118 deletions(-)

commit 84fa3312cfa7d2237d4b56952f2cd6e3591210c4
Author: stijn <stijn@ignitron.net>
Date:   Thu Apr 16 09:13:57 2020 +0200

    all: Format code to add space after C++-style comment start.
    
    Note: the uncrustify configuration is explicitly set to 'add' instead of
    'force' in order not to alter the comments which use extra spaces after //
    as a means of indenting text for clarity.

 mpy-cross/gccollect.c    | 2 +-
 mpy-cross/mpconfigport.h | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

commit 6943fb60fea1c9ce40e7c62d1a17f306fea730d2
Author: David Lechner <david@lechnology.com>
Date:   Mon Apr 13 12:29:51 2020 -0500

    mpy-cross/main: Print uncaught nlr jump to stderr.
    
    This is to be consistent with the same change in the unix port,
    4ab8bee82f7d095c10c624de93da12a7aa1af8fd.

 mpy-cross/main.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 803e5eadea2e22360d1107b50290b54aa7c3afb7
Author: David Lechner <david@lechnology.com>
Date:   Mon Apr 13 12:26:38 2020 -0500

    mpy-cross/main: Fix stderr_print_strn parameter type.
    
    Change mp_uint_t to size_t to match the mp_print_strn_t function prototype.
    This fixes a compiler warning when mp_uint_t and size_t are not the same
    size.

 mpy-cross/main.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 1a3e386c67e03a79eb768cb6e9f6777e002d6660
Author: Damien George <damien.p.george@gmail.com>
Date:   Fri Mar 27 00:35:04 2020 +1100

    all: Remove spaces inside and around parenthesis.
    
    Using new options enabled in the uncrustify configuration.

 mpy-cross/mpconfigport.h | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

commit 74bf17bb0dee27a431e2fc6d0e07ee1df833cf1b
Author: Jeff Epler <jepler@gmail.com>
Date:   Sun Mar 1 11:48:20 2020 -0600

    Makefiles: add targets to build unix port, mpy-cross for fuzzing
    
    This assumes you have properly install afl-fuzz with afl-clang-fast.
    Tested with AFLplusplus 2.60c-75-g2c6847b.

 mpy-cross/.gitignore    | 1 +
 mpy-cross/Makefile.fuzz | 6 ++++++
 2 files changed, 7 insertions(+)

commit 69661f3343bedf86e514337cff63d96cc42f8859
Author: Damien George <damien.p.george@gmail.com>
Date:   Thu Feb 27 15:36:53 2020 +1100

    all: Reformat C and Python source code with tools/codeformat.py.
    
    This is run with uncrustify 0.70.1, and black 19.10b0.

 mpy-cross/gccollect.c    | 18 +++++++--------
 mpy-cross/main.c         | 57 ++++++++++++++++++++++++------------------------
 mpy-cross/mpconfigport.h |  8 +++----
 3 files changed, 42 insertions(+), 41 deletions(-)

commit eee9159a91a2b7ad367850cab2b11ab5c427e4df
Author: Jeff Epler <jepler@gmail.com>
Date:   Sat Jan 25 17:13:29 2020 -0600

    alphabetize

 mpy-cross/.gitignore | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit f13f9c7f308f0a33c6d3ac26057fc21e787dd473
Author: Jeff Epler <jepler@gmail.com>
Date:   Sat Jan 25 15:02:16 2020 -0600

    rework gitignore file

 mpy-cross/.gitignore | 10 ++++++----
 1 file changed, 6 insertions(+), 4 deletions(-)

commit 9673ea4a50ddfd1451a15d2b87ea2390e8b556ce
Author: Jeff Epler <jepler@gmail.com>
Date:   Sat Jan 25 15:02:02 2020 -0600

    Add a makefile to cross-compile for raspbian

 mpy-cross/.gitignore               | 1 +
 mpy-cross/Makefile.static-raspbian | 8 ++++++++
 2 files changed, 9 insertions(+)

commit a43a19728c464a56f240c78fe620a690c8950333
Author: Jeff Epler <jepler@gmail.com>
Date:   Sat Jan 25 14:40:38 2020 -0600

    Define serial_write, it was undefined in the Windows mpy-cross build

 mpy-cross/main.c | 4 ++++
 1 file changed, 4 insertions(+)

commit ebf0fe0a8cfc93546699879b13a87071ea942ce3
Author: Jeff Epler <jepler@gmail.com>
Date:   Sat Jan 25 14:04:11 2020 -0600

    mpy-cross: Make it easier to build mpy-cross static targets

 mpy-cross/.gitignore            |  4 +-
 mpy-cross/Makefile              | 82 +----------------------------------------
 mpy-cross/Makefile.static       |  5 +++
 mpy-cross/Makefile.static-mingw |  6 +++
 mpy-cross/fmode.c               | 49 ++++++++++++++++++++++++
 mpy-cross/fmode.h               | 37 +++++++++++++++++++
 mpy-cross/main.c                |  2 +-
 mpy-cross/mpy-cross.mk          | 81 ++++++++++++++++++++++++++++++++++++++++
 8 files changed, 183 insertions(+), 83 deletions(-)

commit 193bc3702f35bc7b60ffd79e4f41ecd5db1fd383
Author: Jim Mussared <jim.mussared@gmail.com>
Date:   Sat Dec 7 22:31:04 2019 +1100

    mpy-cross/README.md: Add notes about -march and -O.

 mpy-cross/README.md | 6 ++++++
 1 file changed, 6 insertions(+)

commit 82a19cb39f1312a6349c481663905477c878a38d
Author: Damien George <damien.p.george@gmail.com>
Date:   Tue Dec 3 12:32:29 2019 +1100

    mpy-cross: Support armv7em, armv7emsp, armv7emdp architectures.

 mpy-cross/main.c | 11 ++++++++++-
 1 file changed, 10 insertions(+), 1 deletion(-)

commit 1d21b4e7d17fe22dc046a1bfd3251d25c013bd05
Author: Damien George <damien.p.george@gmail.com>
Date:   Fri Sep 13 13:16:00 2019 +1000

    mpy-cross: Enable Xtensa-Windowed native emitter.
    
    Selectable via the command line: -march=xtensawin.

 mpy-cross/main.c         | 5 ++++-
 mpy-cross/mpconfigport.h | 1 +
 2 files changed, 5 insertions(+), 1 deletion(-)

commit b596638b9b28975adee4a06a92497b5d9dbba34c
Author: Damien George <damien.p.george@gmail.com>
Date:   Wed Sep 18 13:45:20 2019 +1000

    mpy-cross: Set number of registers in nlr_buf_t based on native arch.
    
    Fixes #5059.  Done in collaboration with Jim Mussared.

 mpy-cross/main.c | 9 +++++++++
 1 file changed, 9 insertions(+)

commit d96391aca34eb4d516945b34f0bbebf807c41299
Author: stijn <stijn@ignitron.net>
Date:   Wed May 29 18:00:05 2019 +0200

    mpy-cross,windows: Add msvc build of mpy-cross.
    
    Add the project file to the mpy-cross directory, which is also where the
    executable ends up, and change the Appveyor settings to build mpy-cross
    with both msvc and mingw-w64 and verify this all works by running tests
    with --via-mpy.

 mpy-cross/mpy-cross.vcxproj | 103 ++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 103 insertions(+)

commit 5501092776d6e2ca5c4aa901b3b226d2bb1db572
Author: stijn <stijn@ignitron.net>
Date:   Mon Aug 14 12:32:52 2017 +0200

    mpy-cross: Make mpconfigport.h compatible with msvc compiler.
    
    Add a copy of the required options from windows/mpconfigport.h.

 mpy-cross/mpconfigport.h | 37 +++++++++++++++++++++++++++++++++++++
 1 file changed, 37 insertions(+)

commit af20c2ead3e9bb397fdf89e316aa78b56f165013
Author: Damien George <damien.p.george@gmail.com>
Date:   Fri Aug 23 11:20:50 2019 +1000

    py: Add global default_emit_opt variable to make emit kind persistent.
    
    mp_compile no longer takes an emit_opt argument, rather this setting is now
    provided by the global default_emit_opt variable.
    
    Now, when -X emit=native is passed as a command-line option, the emitter
    will be set for all compiled modules (included imports), not just the
    top-level script.
    
    In the future there could be a way to also set this variable from a script.
    
    Fixes issue #4267.

 mpy-cross/main.c | 9 ++++++++-
 1 file changed, 8 insertions(+), 1 deletion(-)

commit 8e3e05761e1143a2502c7eca07c1b22bac192c84
Author: Damien George <damien.p.george@gmail.com>
Date:   Fri Aug 23 11:09:34 2019 +1000

    mpy-cross/main: Only accept full emit cmdline options if native enabled.

 mpy-cross/main.c | 6 ++++++
 1 file changed, 6 insertions(+)

commit 41739506589ec8397613c86d8f682fb7f86c0a9f
Author: Damien George <damien.p.george@gmail.com>
Date:   Fri May 31 14:37:11 2019 +1000

    mpy-cross: Do not automatically build mpy-cross, rather do it manually.
    
    Building mpy-cross automatically leads to some issues with the build
    process and slows it down.  Instead, require it to be built manually.

 mpy-cross/Makefile | 17 -----------------
 1 file changed, 17 deletions(-)

commit c066dadc5b91d000e2f7bba9f3e3edbf0bf33a3d
Author: Damien George <damien.p.george@gmail.com>
Date:   Fri May 24 14:51:48 2019 +1000

    mpy-cross/mpconfigport.h: Remove defn of MP_NOINLINE to use global one.
    
    A global definition of MP_NOINLINE was added to py/mpconfig.h long ago in
    0f5bf1aafe0ca073d958f271bd96addc6da8fe10

 mpy-cross/mpconfigport.h | 4 ----
 1 file changed, 4 deletions(-)

commit 7e90e22ea52665e38138d1e704d5e527439b663c
Author: Damien George <damien.p.george@gmail.com>
Date:   Thu May 2 09:59:21 2019 +1000

    mpy-cross: Add --version command line option to print version info.
    
    Prints something like:
    
    MicroPython v1.10-304-g8031b7a25 on 2019-05-02; mpy-cross emitting mpy v4

 mpy-cross/main.c | 6 ++++++
 1 file changed, 6 insertions(+)

commit e70c438c71cbc3c44b8370ab5504658328b3ced9
Author: Damien George <damien.p.george@gmail.com>
Date:   Wed May 1 15:31:00 2019 +1000

    mpy-cross: Automatically select ARMV6 arch when running on such a host.

 mpy-cross/main.c | 2 ++
 1 file changed, 2 insertions(+)

commit 1556af19bfde9e8f14c84e2bc6a2c3a087e18325
Author: Damien George <damien.p.george@gmail.com>
Date:   Tue Mar 26 18:19:21 2019 +1100

    mpy-cross: Support compiling with MICROPY_PY___FILE__ enabled.

 mpy-cross/main.c | 4 +---
 1 file changed, 1 insertion(+), 3 deletions(-)

commit 9c9bc65e74abb645817c757f005eef6d7394f507
Author: Damien George <damien.p.george@gmail.com>
Date:   Sat Mar 9 10:59:57 2019 +1100

    mpy-cross: Add "-march=<arch>" option to select native emitter.

 mpy-cross/main.c         | 23 +++++++++++++++++++++++
 mpy-cross/mpconfigport.h | 16 ++++++++--------
 2 files changed, 31 insertions(+), 8 deletions(-)

commit d6b2199f3614a5fe2d4da4163ca901ac1e567f5f
Author: Scott Shawcroft <scott@adafruit.com>
Date:   Fri Mar 8 16:20:38 2019 -0800

    Stub out safe mode for mpy-cross

 mpy-cross/Makefile | 1 +
 1 file changed, 1 insertion(+)

commit 89ff506513d52c0c415b2cf45335d60cefac527d
Author: Andrew Leech <andrew.leech@planetinnovation.com.au>
Date:   Wed Dec 12 16:50:55 2018 +1100

    py: Update and rework build system for including external C modules.
    
    How to use this feature is documented in docs/develop/cmodules.rst.

 mpy-cross/Makefile | 2 ++
 1 file changed, 2 insertions(+)

commit 31d2d83e79828552363732e0a118a6e61d8c196b
Author: Damien George <damien.p.george@gmail.com>
Date:   Thu Feb 21 15:19:24 2019 +1100

    mpy-cross: Enable building of x64 native .mpy files.

 mpy-cross/gccollect.c    | 3 ---
 mpy-cross/mpconfigport.h | 4 +++-
 2 files changed, 3 insertions(+), 4 deletions(-)

commit df6c8eaed7e54b656bcf0c02d7451c307e3391e6
Author: Scott Shawcroft <scott@adafruit.com>
Date:   Thu Dec 6 15:29:26 2018 -0800

    Add stack.c stub for mpy-cross

 mpy-cross/Makefile | 1 +
 1 file changed, 1 insertion(+)

commit ab78fe0eb9997622e40d412d5f7d5e9b1a91e47a
Author: Paul Sokolovsky <pfalcon@users.sourceforge.net>
Date:   Sun Jul 29 14:58:30 2018 +0300

    mpy-cross/Makefile: Also undefine MICROPY_FORCE_32BIT and CROSS_COMPILE.
    
    mpy-cross is a host, not target binary. It should not be build with the
    target compiler, compiler options and other settings. For example,
    
    If someone currently tries to build from pristine checkout the unix port
    with the following command:
    
        make CROSS_COMPILE=arm-linux-gnueabihf-
    
    then mpy-cross will be built with arm-linux-gnueabihf-gcc and of course
    won't run on the host, leading to overall build failure.
    
    This situation was worked around for some options in 1d8c3f4cff1, so add
    MICROPY_FORCE_32BIT and CROSS_COMPILE to that set too.

 mpy-cross/Makefile | 2 ++
 1 file changed, 2 insertions(+)

commit 933add6cd833bb6ba6682ad2b6eb478871415ff5
Author: Scott Shawcroft <scott@adafruit.com>
Date:   Tue Jul 31 16:53:54 2018 -0700

    Support internationalisation.

 mpy-cross/Makefile | 1 +
 1 file changed, 1 insertion(+)

commit d305e7d6cfea2e336784d756997e4da725041f83
Author: Dan Halbert <halbert@adafruit.com>
Date:   Tue Jul 10 22:29:36 2018 -0400

    handle errno defns for mingw and use correct executable name

 mpy-cross/Makefile       |  6 ++++++
 mpy-cross/mpconfigport.h | 44 ++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 50 insertions(+)

commit 85d5d321e23d51630f9df5b61529de49dfd07cad
Author: Dan Halbert <halbert@adafruit.com>
Date:   Tue Jul 10 10:38:32 2018 -0400

    Add STATIC_BUILD make flag for mpy-cross to build a static executable

 mpy-cross/Makefile | 11 +++++++++++
 1 file changed, 11 insertions(+)

commit ee40d1704fc3ec285f0be67ef7010670a1c5c01a
Author: Damien George <damien.p.george@gmail.com>
Date:   Tue Jul 10 14:11:28 2018 +1000

    mpy-cross: Make build independent of extmod directory.
    
    mpy-cross doesn't depend on any code in the extmod directory so completely
    exclude it from the build (extmod may still be scanned for qstrs but that
    is controlled by py/py.mk).  This speeds up the build a little, and
    improves abstraction of this component.
    
    Also, make -I$(BUILD) take precedence over -I$(TOP) in case there are stray
    files in the root directory that would be picked up.

 mpy-cross/Makefile    | 6 +++---
 mpy-cross/mphalport.h | 3 ++-
 2 files changed, 5 insertions(+), 4 deletions(-)

commit a3dc1b1957d2c96d7c60c2c629c95077b03488a1
Author: Damien George <damien.p.george@gmail.com>
Date:   Wed Oct 4 12:37:50 2017 +1100

    all: Remove inclusion of internal py header files.
    
    Header files that are considered internal to the py core and should not
    normally be included directly are:
        py/nlr.h - internal nlr configuration and declarations
        py/bc0.h - contains bytecode macro definitions
        py/runtime0.h - contains basic runtime enums
    
    Instead, the top-level header files to include are one of:
        py/obj.h - includes runtime0.h and defines everything to use the
            mp_obj_t type
        py/runtime.h - includes mpstate.h and hence nlr.h, obj.h, runtime0.h,
            and defines everything to use the general runtime support functions
    
    Additional, specific headers (eg py/objlist.h) can be included if needed.

 mpy-cross/main.c | 1 -
 1 file changed, 1 deletion(-)

commit 4a93801c12898898744131f57d79cf216d0861b3
Author: Damien George <damien.p.george@gmail.com>
Date:   Wed Sep 6 14:09:13 2017 +1000

    all: Update Makefiles and others to build with new ports/ dir layout.
    
    Also renames "stmhal" to "stm32" in documentation and everywhere else.

 mpy-cross/Makefile | 2 +-
 mpy-cross/main.c   | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

commit 7d4a2f773cc6ce24a91e2d210378188f3371e8a6
Author: Damien George <damien.p.george@gmail.com>
Date:   Fri Aug 11 12:22:19 2017 +1000

    all: Make use of $(TOP) variable in Makefiles, instead of "..".
    
    $(TOP) is defined in py/mkenv.mk and should be used to refer to the top
    level of this repository.

 mpy-cross/Makefile | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

commit 55f33240f3d7051d4213629e92437a36f1fac50e
Author: Alexander Steffen <devel.20.webmeister@spamgourmet.com>
Date:   Fri Jun 30 09:22:17 2017 +0200

    all: Use the name MicroPython consistently in comments
    
    There were several different spellings of MicroPython present in comments,
    when there should be only one.

 mpy-cross/Makefile | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit aa7be82a4dff59b22763abbe1bd5e74c0e37b453
Author: Damien George <damien.p.george@gmail.com>
Date:   Mon Jul 24 18:43:14 2017 +1000

    all: Don't include system errno.h when it's not needed.

 mpy-cross/main.c | 1 -
 1 file changed, 1 deletion(-)

commit 761e4c7ff62896c7d8f8c3dfc3cc98a4cc4f2f6f
Author: Damien George <damien.p.george@gmail.com>
Date:   Wed Jul 19 13:12:10 2017 +1000

    all: Remove trailing spaces, per coding conventions.

 mpy-cross/Makefile | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit ed6d2547dfcf8ef94c07e712f7bf625301e23724
Author: Damien George <damien.p.george@gmail.com>
Date:   Thu May 25 22:04:51 2017 +1000

    mpy-cross/Makefile: Guard "override undefine" by test for make feature.
    
    make v3.81 doesn't have "undefine" so we can't use it with that version.

 mpy-cross/Makefile | 2 ++
 1 file changed, 2 insertions(+)

commit 1d8c3f4cff19e8128757a7c24ca98d6ea5e95c0d
Author: Damien George <damien.p.george@gmail.com>
Date:   Wed Apr 26 11:34:22 2017 +1000

    mpy-cross/Makefile: Override undefine any inherited variables.
    
    This is a temporary hack to allow othe Makefiles to build mpy-cross
    recursively.

 mpy-cross/Makefile | 11 +++++++++++
 1 file changed, 11 insertions(+)

commit 5b57ae985ff7064dd7b09b0ce891697bfaa5dae2
Author: stijn <stijn@ignitron.net>
Date:   Wed Aug 10 10:19:16 2016 +0200

    mpy-cross: Fix compiler detection for including windows/fmode.c
    
    fmode.c should only be included for builds targetting 'pure' windows, i.e.
    msvc or mingw builds but not when using msys or cygwin's gcc (see #2298).
    Just checking if the OS is windows and UNAME doesn't have msys stil leaves
    the gate open for builds with cygwin's gcc since UNAME there is e.g.
    CYGWIN_NT-6.1-WOW.
    Fix this by checking for 'mingw' explicitly in the compiler version; both
    gcc and clang have the -dumpmachine flag so the check should be ok for
    all platforms.

 mpy-cross/Makefile | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

commit 03053f82db8fb79e8f62524948ebc2331c957af8
Author: Damien George <damien.p.george@gmail.com>
Date:   Sat Apr 22 15:09:15 2017 +1000

    mpy-cross, unix, windows, stmhal: Enable return-if-else optimisation.
    
    Prior to making this a config option it was previously available on these
    (and all other) ports, and it makes sense to keep it enabled for mpy-cross
    as well as ports that have a decent amount of space for the code.

 mpy-cross/mpconfigport.h | 1 +
 1 file changed, 1 insertion(+)

commit 4c307bfba1e5ffa3cec94bd63ba19ba6c322883b
Author: Damien George <damien.p.george@gmail.com>
Date:   Sat Apr 1 11:39:38 2017 +1100

    all: Move BYTES_PER_WORD definition from ports to py/mpconfig.h
    
    It can still be overwritten by a port in mpconfigport.h but for almost
    all cases one can use the provided default.

 mpy-cross/mpconfigport.h | 2 --
 1 file changed, 2 deletions(-)

commit 75589272ef12d538ab7ce4f4453be85d826b5083
Author: Krzysztof Blazewicz <blazewicz.krzysztof@gmail.com>
Date:   Sun Mar 5 13:28:27 2017 +0100

    all/Makefile: Remove -ansi from GCC flags, its ignored anyway.
    
    The -ansi flag is used for C dialect selection and it is equivalent to -std=c90.
    Because it goes right before -std=gnu99 it is ignored as for conflicting flags
    GCC always uses the last one.

 mpy-cross/Makefile | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 97142000f78fab8d1646efc17d60ac0e20919bd5
Author: Damien George <damien.p.george@gmail.com>
Date:   Tue Mar 14 11:43:28 2017 +1100

    mpy-cross/main: Move lexer constructor to within NLR handler block.

 mpy-cross/main.c | 8 ++------
 1 file changed, 2 insertions(+), 6 deletions(-)

commit 85ae17c9938d65fe33835b72a8d98f2eda93605f
Author: Damien George <damien.p.george@gmail.com>
Date:   Wed Nov 16 20:25:36 2016 +1100

    mpy-cross: Get compiling after recent persistent code refactors.

 mpy-cross/main.c         | 1 +
 mpy-cross/mpconfigport.h | 1 +
 2 files changed, 2 insertions(+)

commit 2b882e9acaecd92cf3107a597c9aba99f23b794e
Author: Damien George <damien.p.george@gmail.com>
Date:   Mon Sep 5 17:30:24 2016 +1000

    mpy-cross: Don't use the internal printf functions.
    
    They require mp_hal_stdout_tx_strn_cooked, which requires extra work to
    add to mpy-cross.

 mpy-cross/mpconfigport.h | 1 +
 1 file changed, 1 insertion(+)

commit 675d1c9c600224820f49f912e4ff7d6cf2f97711
Author: Damien George <damien.p.george@gmail.com>
Date:   Mon Aug 15 11:02:59 2016 +1000

    ports: Remove typedef of machine_ptr_t, it's no longer needed.
    
    This type was used only for the typedef of mp_obj_t, which is now defined
    by the object representation.  So we can now remove this unused typedef,
    to simplify the mpconfigport.h file.

 mpy-cross/mpconfigport.h | 3 ---
 1 file changed, 3 deletions(-)

commit 37b143ce9ef761f4f0648bae447617f019fc34e1
Author: stijn <stijn@ignitron.net>
Date:   Mon Jul 25 14:45:57 2016 +0200

    mpy-cross: Fix mingw and msys2 compilation
    
    When compiling with msys2's gcc there's no need to apply the binary fmode
    so adjust the Makefile to reflect that.
    When compiling with mingw we need to include malloc.h since there is no
    alloca.h, and the 64bit detection in mpconfigport.h needs some adjustment.

 mpy-cross/Makefile       | 4 +++-
 mpy-cross/mpconfigport.h | 6 ++++++
 2 files changed, 9 insertions(+), 1 deletion(-)

commit 9bdb82ef6b3147662ffc6b6435c6bd376c60e19e
Author: stijn <stijn@ignitron.net>
Date:   Fri Jul 22 11:54:26 2016 +0200

    mpy-cross: Use binary file translation mode for creating mpy files on windows
    
    This is a fix for https://github.com/micropython/micropython/issues/2209:
    by default a file created using open() uses text translation mode so writing
    \n to it will result in the file having \r\n. This is obviously problematic
    for binary .mpy files, so provide functions for setting the open mode
    and use binary mode in mpy-cross' main().

 mpy-cross/Makefile | 4 ++++
 mpy-cross/main.c   | 6 ++++++
 2 files changed, 10 insertions(+)

commit e9f3fb76620fd2f9a392f2e879431843c27024cc
Author: Anton Sokolchenko <wsevendays@gmail.com>
Date:   Sat Jul 9 02:02:02 2016 +0300

    mpy-cross: Fix Makefile to handle gc-sections linker flags on OS X.

 mpy-cross/Makefile | 5 ++---
 1 file changed, 2 insertions(+), 3 deletions(-)

commit 330165a2cc9a0d4d5d00f13f851412c25d5f4ed2
Author: Damien George <damien.p.george@gmail.com>
Date:   Fri Apr 22 22:44:56 2016 +0000

    py: Add MP_STATE_THREAD to hold state specific to a given thread.

 mpy-cross/gccollect.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 74fb4e795b6a709a21803b30df7dbb66aa88b354
Author: Damien George <damien.p.george@gmail.com>
Date:   Mon May 23 13:25:54 2016 +0100

    mpy-cross: Add -s option to specify the embedded source filename.
    
    .mpy files contain the name of the source file that they were compiled
    from.  This patch adds a way to change this name to an arbitrary string,
    specified on the command line with the -s option.  The default is to use
    the full name of the input filename.
    
    This new -s option is useful to strip off a leading directory name so
    that mpy-tool.py can freeze packages.

 mpy-cross/main.c | 21 +++++++++++++++++----
 1 file changed, 17 insertions(+), 4 deletions(-)

commit 853fb08d0d42cca2087fb5b6ae24278bafd6a503
Author: Damien George <damien.p.george@gmail.com>
Date:   Wed Mar 9 15:56:11 2016 +0000

    mpy-cross: Remove setting of MICROPY_FORCE_32BIT=1 from Makefile.
    
    Building in 32-bit mode was only to reduce binary size on 64-bit machines
    and is otherwise not needed.  Having it forced to 32-bit meant an
    unnecessary dependency on 32-bit libraries that is now removed.

 mpy-cross/Makefile | 2 --
 1 file changed, 2 deletions(-)

commit 3d1d92acfcfbc47677466409fc9f60effae37678
Author: Damien George <damien.p.george@gmail.com>
Date:   Wed Mar 2 16:12:00 2016 +0000

    mpy-cross: Give a more sensible error message when file doesn't exist.

 mpy-cross/main.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 56f76b873a28a35f045c93cb9d76d78827f87462
Author: Damien George <damien.p.george@gmail.com>
Date:   Thu Feb 11 22:37:26 2016 +0000

    mpy-cross: Add new component, a cross compiler for MicroPython bytecode.
    
    This component allows to generate .mpy files (pre compiled bytecode)
    which can be executed within any MicroPython runtime/VM.

 mpy-cross/.gitignore     |   1 +
 mpy-cross/Makefile       |  58 ++++++++++
 mpy-cross/README.md      |  25 +++++
 mpy-cross/gccollect.c    | 152 ++++++++++++++++++++++++++
 mpy-cross/main.c         | 272 +++++++++++++++++++++++++++++++++++++++++++++++
 mpy-cross/mpconfigport.h | 122 +++++++++++++++++++++
 mpy-cross/mphalport.h    |   1 +
 mpy-cross/qstrdefsport.h |   1 +
 8 files changed, 632 insertions(+)
